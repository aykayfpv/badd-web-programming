"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[5937],{25937:(n,e,t)=>{t.r(e),t.d(e,{default:()=>a});const a='class CounterWidget extends HTMLElement {\n  static observedAttributes = [\n    "value",\n    "min",\n    "max",\n    "textIncrement",\n    "textDecrement",\n  ];\n\n  #internals;\n  #shadowRoot;\n  #callbacks;\n\n  #value = 0;\n  #min = Number.NEGATIVE_INFINITY;\n  #max = Number.POSITIVE_INFINITY;\n  #textIncrement;\n  #textDecrement;\n\n  constructor() {\n    super();\n\n    this.#internals = this.attachInternals();\n    this.attachShadow({ mode: "closed" });\n\n    this.#callbacks = {\n      click: (e) => this.#onClick(e),\n    };\n\n    CounterWidget.#setupShadowRoot(this.#internals.shadowRoot);\n\n    this.value = 0;\n    this.textIncrement = "increment";\n    this.textDecrement = "decrement";\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    switch (name) {\n      case "min":\n        this.min = newValue;\n        break;\n      case "max":\n        this.max = newValue;\n        break;\n      case "textIncrement":\n        this.textIncrement = newValue;\n        break;\n      case "textDecrement":\n        this.textDecrement = newValue;\n        break;\n      case "value":\n        this.value = newValue;\n        break;\n    }\n  }\n\n  connectedCallback() {\n    this.#internals.shadowRoot.addEventListener("click", this.#callbacks.click);\n  }\n\n  disconnectedCallback() {\n    this.#internals.shadowRoot.removeEventListener(\n      "click",\n      this.#callbacks.click,\n    );\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  set value(newValue) {\n    const valueNumber = this.#parseNumber(newValue, 0);\n    if (valueNumber >= this.#min && valueNumber <= this.#max) {\n      this.#value = valueNumber;\n      if (this.#internals.shadowRoot) {\n        this.#internals.shadowRoot.querySelector("output").textContent =\n          this.#value.toString();\n      }\n    }\n  }\n\n  get min() {\n    return this.#min;\n  }\n\n  set min(newValue) {\n    const valueNumber = this.#parseNumber(newValue, 0);\n    this.#min = Math.min(valueNumber, this.#max);\n    if (this.#value < this.#min) {\n      this.value = this.#min;\n    }\n  }\n\n  get max() {\n    return this.#min;\n  }\n\n  set max(newValue) {\n    const valueNumber = this.#parseNumber(newValue, 0);\n    this.#max = Math.max(valueNumber, this.#min);\n    if (this.#value > this.#max) {\n      this.value = this.#max;\n    }\n  }\n\n  get textDecrement() {\n    return this.#textDecrement;\n  }\n\n  set textDecrement(newValue) {\n    this.#textDecrement = newValue;\n    if (this.#internals.shadowRoot) {\n      this.#internals.shadowRoot.querySelector(".btn-decrement").textContent =\n        this.#textDecrement.toString();\n    }\n  }\n\n  get textIncrement() {\n    return this.#textDecrement;\n  }\n\n  set textIncrement(newValue) {\n    this.#textIncrement = newValue;\n    if (this.#internals.shadowRoot) {\n      this.#internals.shadowRoot.querySelector(".btn-increment").textContent =\n        this.#textIncrement.toString();\n    }\n  }\n\n  /**\n   * @param {Event} event\n   */\n  #onClick(event) {\n    if (event.target instanceof HTMLElement) {\n      if (event.target.classList.contains("btn-increment")) {\n        this.#handleIncrement();\n      } else if (event.target.classList.contains("btn-decrement")) {\n        this.#handleDecrement();\n      }\n    }\n  }\n\n  #handleIncrement() {\n    this.value = this.value + 1;\n  }\n\n  #handleDecrement() {\n    this.value = this.value - 1;\n  }\n\n  #parseNumber(value, defaultValue) {\n    const asNumber =\n      typeof value === "number" ? value : Number.parseFloat(String(value));\n    return Number.isNaN(asNumber) ? defaultValue : asNumber;\n  }\n\n  static #setupShadowRoot(shadowRoot) {\n    const style = document.createElement("style");\n\n    const output = document.createElement("output");\n\n    const buttonBar = document.createElement("div");\n    const increment = document.createElement("button");\n    const customButtons = document.createElement("slot");\n    const decrement = document.createElement("button");\n\n    style.textContent = `\n    output {\n      display: block;\n    }\n    .btn, ::slotted(button) {\n      cursor: pointer;\n    }\n    .btn-bar {\n      display: flex;\n      flex-direction: row;\n      column-gap: 0.5em;\n    }\n    `;\n\n    output.part = "counter";\n\n    buttonBar.classList.add("btn-bar");\n\n    increment.type = "button";\n    increment.classList.add("btn", "btn-increment");\n    increment.part = "increment";\n\n    customButtons.name = "buttons";\n    customButtons.classList.add("btn-custom");\n\n    decrement.type = "button";\n    decrement.classList.add("btn", "btn-decrement");\n    decrement.part = "decrement";\n\n    buttonBar.append(decrement, customButtons, increment);\n    shadowRoot.append(style, output, buttonBar);\n  }\n}\n\ncustomElements.define("counter-widget", CounterWidget, {});\n\ndocument.querySelector(".double").addEventListener("click", (e) => {\n  const counter = e.target.parentElement;\n  counter.value *= 2;\n});\n\ndocument.querySelector(".halve").addEventListener("click", (e) => {\n  const counter = e.target.parentElement;\n  counter.value /= 2;\n});\n'}}]);