"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[4881],{74881:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});const i="// Findet die ersten 20 durch 3 teilbaren Quadratzahlen\nconst first200SquareNumbersDivisibleBy3 \n  = limit(filter(map(integers(), square), isDivisibleBy(3)), 20);\n\nfor (const x of first200SquareNumbersDivisibleBy3) {\n  console.log(x);\n}\n\n// Nimmt eine Menge von Elementen und eine Mapping-Funktion.\n// Liefert ein Iterator zur\xfcck \xfcber die Elemente mit der Mapping-Funktion angewandt\nfunction* map(elements, fn) {\n  for (const element of elements) {\n    yield fn(element);\n  }\n}\n\n// Nimmt eine Menge von Elementen und eine Test-Funktion.\n// Liefert einen Iterator zur\xfcck \xfcber die Elemente, wo die Test-Funktion true ist\nfunction* filter(elements, test) {\n  for (const element of elements) {\n    if (test(element)) {\n      yield element;\n    }\n  }\n}\n\n// Nimmt eine Menge von Elementen und eine H\xf6chstzahl.\n// Liefert einen Iterator zur\xfcck \xfcber h\xf6chstens soviele Elemente.\nfunction* limit(elements, limit) {\n  let count = 0;\n  for (const element of elements) {\n    if (count >= limit) {\n      break;\n    }\n    yield element;\n    count += 1;\n  }\n}\n\n// Liefert einen Iterator \xfcber alle positiven Ganzzahlen zur\xfcck\nfunction* integers() {\n  let i = 0;\n  while (true) {\n    yield i++;\n  }\n}\n\nfunction square(x) {\n  return x * x;\n}\n\nfunction isDivisibleBy(n) {\n  return (x) => x % n === 0;\n}\n"}}]);