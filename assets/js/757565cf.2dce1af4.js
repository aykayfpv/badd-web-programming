"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[1779],{1585:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"web-programming/javascript/js-doc-comments","title":"Abschnitt 9 - Dokumentation","description":"Dokumentation eines Programms mittels Doc-Kommentaren.","source":"@site/docs/web-programming/javascript/jsdocs.mdx","sourceDirName":"web-programming/javascript","slug":"/js/doc-comments","permalink":"/badd-web-programming/docs/js/doc-comments","draft":false,"unlisted":false,"editUrl":"https://github.com/blutorange/badd-web-programming/tree/main/packages/lecture/docs/web-programming/javascript/jsdocs.mdx","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"js-doc-comments","slug":"/js/doc-comments","sidebar_position":9,"description":"Dokumentation eines Programms mittels Doc-Kommentaren."},"sidebar":"tutorialSidebar","previous":{"title":"Abschnitt 8 - Web Worker","permalink":"/badd-web-programming/docs/js/webworker"},"next":{"title":"Abschnitt 10 - Typisierung","permalink":"/badd-web-programming/docs/js/types"}}');var r=t(1085),s=t(1184),a=t(8927);const o={id:"js-doc-comments",slug:"/js/doc-comments",sidebar_position:9,description:"Dokumentation eines Programms mittels Doc-Kommentaren."},c="Abschnitt 9 - Dokumentation",d={},l=[];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"abschnitt-9---dokumentation",children:"Abschnitt 9 - Dokumentation"})}),"\n",(0,r.jsx)(n.p,{children:"Zu guten Programmieren geh\xf6rt nicht nur, funktionsf\xe4hrigen Code zu schreiben,\nsondern diesen auch zu dokumentieren. Damit helfen wir anderen Entwicklern, die\nden Code sich anschauen oder damit arbeiten m\xfcssen."}),"\n",(0,r.jsx)(n.p,{children:"Ein Mittel zur Dokumentation besteht darin, direkt im Code an Funktionen und\nKlassen zu beschreiben, was diese tun und was dabei beachtet werden muss."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Doc-Kommentare gibt es auch in vielen anderen Programmiersprachen, wie\nin ",(0,r.jsx)(n.a,{href:"https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html",children:"Java"}),",\nin ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/documentation-comments",children:"C#"}),",\nin ",(0,r.jsx)(n.a,{href:"https://haskell-haddock.readthedocs.io/latest/markup.html",children:"Haskell"})," oder\nin ",(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0257/",children:"Python"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"In JavaScript gibt es daf\xfcr eine spezielle Art von Kommentaren, sogenannte\nDoc-Kommentare. Dabei wir ein Multi-Line-Kommentar mit der Sternen am Anfang\nverwendet:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'/**\n * Checks if a `value` starts with a given `prefix`. __Both values must be\n * strings.__\n * \n * If the prefix is the [empty string](https://en.wikipedia.org/wiki/Empty_string),\n * always returns `true`.\n * \n * If the value is the empty string, always returns `false`, unless the prefix\n * is also the empty string.\n * \n * @example\n * ```js\n * startsWith("foo-bar", "foo-") // => true\n * startsWith("foo-bar", "-bar") // => false\n * startsWith("foo", "") // => true\n * startsWith("", "foo") // => false\n * startsWith("", "")    // => true\n * ```\n * \n * @param {string} value - A string to check whether it starts with a prefix,\n * e.g. `foo-bar`.\n * @param {string} prefix - A prefix to test, e.g. `foo-`.\n * @returns {boolean} `true` if the value starts with the given prefix, `false`\n * otherwise.\n */\nfunction startsWith(value, prefix) {\n  if (prefix.length === 0) {\n    return true;\n  }\n  if (value.length === 0) {\n    return false;\n  }\n  return value.substring(0, prefix.length) === prefix;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Solche Kommentare werden von den meisten IDE und Code-Editoren besonders behandelt\nund angezeigt:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Overlay-Dokumentation mittels Doc-Kommentar",src:t(8155).A+"",width:"1208",height:"936"})}),"\n",(0,r.jsx)(n.p,{children:"Ein Doc-Kommentar ist immer aus 2 Abschnitten aufgebaut:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Einer Freitextbeschreibung"}),"\n",(0,r.jsxs)(n.li,{children:["Eine Liste von Tags, die mit ",(0,r.jsx)(n.code,{children:"@"})," beginnen und strukturiert spezifische Eigenschaften beschreiben."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Die h\xe4ufigsten Tags sind ",(0,r.jsx)(n.code,{children:"@param"})," und ",(0,r.jsx)(n.code,{children:"@returns"}),", welche bei Funktionen verwendet\nwerden, um die Parameter und den R\xfcckgabewert zu dokumentieren."]}),"\n",(0,r.jsx)(n.p,{children:"Innerhalb geschweifter Klammern wird dabei der Typ des Arguments angegeben.\nWeitere Typen lernen wir im n\xe4chsten Abschnitt kennen."}),"\n",(0,r.jsx)(n.p,{children:"Innerhalb der Doc-Kommentar kann Text auch ausgezeichnet werden (Links, fette\nSchrift, Code-Beispiele, etc.). Hierzu wird Markdown verwendet."}),"\n",(0,r.jsx)(n.p,{children:"Markdown ist eine Auszeichnungssprache, welche versucht, gleichzeitig auch\ngut in Textform lesbar und bearbeitbar zu sein. Auch diese Tutorialseiten sind\nin Markdown geschrieben:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Mittels einfachen Unterstrichen ",(0,r.jsx)(n.code,{children:"_kursiv_"})," wird Text ",(0,r.jsx)(n.em,{children:"kursiv"})," gedruckt."]}),"\n",(0,r.jsxs)(n.li,{children:["Mittels doppelten Unterstrichen ",(0,r.jsx)(n.code,{children:"__fett__"})," wird Text ",(0,r.jsx)(n.strong,{children:"fett"})," gedruckt."]}),"\n",(0,r.jsxs)(n.li,{children:["Mittels Backticks ",(0,r.jsx)(n.code,{children:"`1+2`"})," wird Text als Code markiert: ",(0,r.jsx)(n.code,{children:"1+2"})]}),"\n",(0,r.jsxs)(n.li,{children:["Mittels Klammern ",(0,r.jsx)(n.code,{children:"[example](https://example.com)"})," wird ein Link ",(0,r.jsx)(n.a,{href:"https://example.com",children:"example"})," eingef\xfcgt."]}),"\n",(0,r.jsxs)(n.li,{children:["Mittels einem Strich am Anfang ",(0,r.jsx)(n.code,{children:"- Anf\xfchrungspunkt"})," wird eine Liste wie diese erzeugt."]}),"\n",(0,r.jsx)(n.li,{children:"Mittels 3 Backticks wird ein Code-Schnippsel eingef\xfcgt."}),"\n"]}),"\n",(0,r.jsx)(a.A,{language:"markdown",children:["```js",'console.log("Hallo Welt");',"```"].join("\n")}),"\n",(0,r.jsx)(n.p,{children:"Weitere Funktionalit\xe4ten von Markdown finden sich etwas in diesem Tutorial:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Markdown-Guide: ",(0,r.jsx)(n.a,{href:"https://www.markdownguide.org/basic-syntax/",children:"https://www.markdownguide.org/basic-syntax/"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8155:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/doc-comment-mouseover-047bc2338a86333c3f95a99a9218a137.png"}}]);