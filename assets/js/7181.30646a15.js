"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[7181],{17181:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o='const todoTemplate = $(".todo-list-item-template");\nconst todoList = $(".todo-list");\nconst newTodoInput = $(".new-todo");\nconst toggleAll = $(".toggle-all-container");\nconst todoCount = $(".todo-count");\nconst filterAll = $(".filter-all");\nconst filterActive = $(".filter-active");\nconst filterCompleted = $(".filter-completed");\nconst clearCompleted = $(".clear-completed");\nconst footer = $(".footer");\n\nloadItems();\n\n// Alle TODOs erledigt oder unerledigt markieren bei Toggle-All-Button\ntoggleAll.on("pointerup", () => {\n  const someCompleted = todoList.find(".toggle").filter(":checked").length > 0;\n  const newCompleted = someCompleted ? false : true;\n  todoList.find(".todo-list-item").toggleClass("completed", newCompleted);\n  todoList.find(".toggle").prop("checked", newCompleted);\n  updateFooterAndFilter();\n  storeItems();\n});\n\n// Neues TODO erzeugen bei Enter im Input\nnewTodoInput.on("keydown", (e) => {\n  if (e.key === "Enter") {\n    const todoText = $(".new-todo").val().trim();\n    if (todoText.length === 0) {\n      return;\n    }\n\n    // Create and add new TODO\n    createNewTodo(todoText, false);\n\n    // Clear new TODO input\n    newTodoInput.val("");\n\n    updateFooterAndFilter();\n    storeItems();\n  }\n});\n\n// Bei Klick auf Radiobutton am TODO-Item\n// Wenn TODO als erledigt / offen markiert wird\ntodoList.on("change", ".toggle", (e) => {\n  const completed = $(e.target).prop("checked");\n  $(e.target).closest(".todo-list-item").toggleClass("completed", completed);\n  updateFooterAndFilter();\n  storeItems();\n});\n\n// Bei Klick auf L\xf6sch-Button am TODO-Item\ntodoList.on("pointerup", ".destroy", (e) => {\n  $(e.target).closest(".todo-list-item").remove();\n  updateFooterAndFilter();\n  storeItems();\n});\n\n// In Bearbeitungsmodus wechseln, wenn TODO doppelt geklickt wird\ntodoList.on("dblclick", ".todo-list-item-content", (e) => {\n  // Alle anderen Bearbeitungen abbrechen\n  todoList.find(".todo-list-item").removeClass("editing");\n\n  // Neue Bearbeitung starten\n  const item = $(e.target).closest(".todo-list-item").addClass("editing");\n  const todoText = item.find(".todo-list-item-content").text();\n  item.find(".edit").val(todoText).trigger("focus");\n});\n\n// TODO aktualisieren, wenn Bearbeitung fertig ist\ntodoList.on("keydown", (e) => {\n  if ($(e.target).is(".edit") && e.key === "Enter") {\n    const item = $(e.target).closest(".todo-list-item");\n    const itemContent = item.find(".todo-list-item-content");\n    const oldText = itemContent.text();\n    const newText = $(e.target).val().trim();\n    item.removeClass("editing");\n    itemContent.text(newText.length > 0 ? newText : oldText);\n    storeItems();\n  }\n});\n\n// Alle erledigten L\xf6schen bei Klick auf diesen Button\nclearCompleted.on("pointerup", () => {\n  todoList.find(".toggle").filter(":checked").closest(".todo-list-item").remove();\n  storeItems();\n  updateFooterAndFilter();\n});\n\n// Filter f\xfcr alle, aktive, erledigte TODOs\nfilterAll.on("pointerup", () => {\n  filterActive.removeClass("selected");\n  filterCompleted.removeClass("selected");\n  updateFooterAndFilter();\n});\nfilterActive.on("pointerup", () => {\n  filterActive.addClass("selected");\n  filterCompleted.removeClass("selected");\n  updateFooterAndFilter();\n});\nfilterCompleted.on("pointerup", () => {\n  filterActive.removeClass("selected");\n  filterCompleted.addClass("selected");\n  updateFooterAndFilter();\n});\n\nfunction createNewTodo(content, completed) {\n  const newTodo = $(todoTemplate.prop("content")).find(".todo-list-item").clone(true, false);\n  newTodo.find(".todo-list-item-content").text(content);\n  newTodo.find(".toggle").prop("checked", completed);\n  todoList.append(newTodo);\n}\n\nfunction updateFooterAndFilter() {\n  // Anzahl offener TODOs\n  const uncheckedCount = todoList.find(".toggle").not(":checked").length;\n  todoCount.text(`${uncheckedCount} TODOs verbleibend!`);\n\n  // Footer ausblenden, wenn keine TODOs\n  const hasAnyItems = todoList.find(".toggle").length > 0;\n  footer.toggleClass("hidden", !hasAnyItems);\n\n  // Filter-Option anwenden\n  const items = todoList.find(".todo-list-item").removeClass("hidden");\n  if (filterActive.hasClass("selected")) {\n    items.find(".toggle").filter(":checked").closest(".todo-list-item").addClass("hidden");\n  } else if (filterCompleted.hasClass("selected")) {\n    items.find(".toggle").not(":checked").closest(".todo-list-item").addClass("hidden");\n  }\n}\n\n// Aktuelle TODOs im localStorage speichern\nfunction storeItems() {\n  const itemData = todoList.find(".todo-list-item").toArray()\n    .map((item) => {\n      const content = $(item).find(".todo-list-item-content").text();\n      const completed = $(item).find(".toggle").is(":checked");\n      return { completed, content };\n    });\n  localStorage.setItem("todo-app-items-jquery", JSON.stringify(itemData));\n}\n\n// TODOs aus localeStorage laden, entfernt bestehende TODOs\nfunction loadItems() {\n  todoList.empty();\n\n  try {\n    const itemDataString = localStorage.getItem("todo-app-items-jquery");\n    const itemData = itemDataString ? JSON.parse(itemDataString) : [];\n    for (const item of itemData) {\n      createNewTodo(item.content, item.completed);\n    }\n  } catch (e) {\n    console.error(\n      "Could not load items from local storage -- corrupted data?",\n      e,\n    );\n  }\n\n  updateFooterAndFilter();\n}'}}]);