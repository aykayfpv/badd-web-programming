"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[85],{85:(e,n,s)=>{s.r(n),s.d(n,{default:()=>t});const t='class FoodDeliveryTask {\n  start() {\n    return new Promise(r => setTimeout(r, 1000));\n  }\n  getCompletionResultSupplier() {\n    return () => ({ time: new Date(), message: this.#getCompletionMessage() });\n  }\n  #getCompletionMessage() {\n    return "Done delivering food";\n  }\n}\n\nclass KitchenCleanTask {\n  start() {\n    return new Promise(r => setTimeout(r, 1000));\n  }\n  getCompletionResultSupplier() {\n    return () => ({ time: new Date(), message: this.#getCompletionMessage() });\n  }\n  #getCompletionMessage() {\n    return "Done cleaning kitchen";\n  }\n}\n\nclass TaskQueue {\n  #tasks = [];\n  #current = undefined;\n  #acceptNewTasks = true;\n  #resolveWaitUntilDone = undefined;\n  #results = [];\n\n  submit(task) {\n    if (!this.#acceptNewTasks) {\n      throw new Error("This queue does not accept new tasks anymore");\n    }\n    this.#tasks.push(task);\n    this.#processQueue();\n  }\n\n  #processQueue() {\n    if (this.#current) {\n      return;\n    }\n    if (this.#tasks.length > 0) {\n      const nextTask = this.#tasks.shift();\n      this.#current = {\n        promise: nextTask.start(),\n        getResult: nextTask.getCompletionResultSupplier(),\n      };\n      this.#current.promise\n        .finally(() => this.#results.push(this.#current.getResult()))\n        .finally(() => (this.#current = undefined))\n        .finally(() => this.#processQueue());\n    } else {\n      if (this.#resolveWaitUntilDone) {\n        this.#resolveWaitUntilDone(this.#results);\n      }\n    }\n  }\n  waitUntilDone() {\n    this.#acceptNewTasks = false;\n    if (this.#tasks.length === 0 && this.#current === undefined) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n      this.#resolveWaitUntilDone = resolve;\n    });\n  }\n}\n\nconsole.log("This will take 2 seconds");\n\nconst taskQueue = new TaskQueue();\ntaskQueue.submit(new FoodDeliveryTask());\ntaskQueue.submit(new KitchenCleanTask());\ntaskQueue.waitUntilDone();'}}]);