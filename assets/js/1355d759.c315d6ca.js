"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[9540],{71184:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(14041);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},79141:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>o,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"exercise/ts/exercise-ts","title":"Aufgaben zu TypeScript","description":"\xdcbungsaufgaben zur Typisierung mittels TypeScript","source":"@site/docs/exercise/ts/index.mdx","sourceDirName":"exercise/ts","slug":"/exercise/ts","permalink":"/badd-web-programming/docs/exercise/ts","draft":false,"unlisted":false,"editUrl":"https://github.com/blutorange/badd-web-programming/tree/main/packages/lecture/docs/exercise/ts/index.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"exercise-ts","slug":"/exercise/ts","sidebar_position":5,"description":"\xdcbungsaufgaben zur Typisierung mittels TypeScript"},"sidebar":"tutorialSidebar","previous":{"title":"Aufgaben zur DOM-API","permalink":"/badd-web-programming/docs/exercise/js-dom"},"next":{"title":"Aufgaben zum Build-Step","permalink":"/badd-web-programming/docs/exercise/build-step"}}');var t=r(31085),s=r(71184);r(16279);const a={id:"exercise-ts",slug:"/exercise/ts",sidebar_position:5,description:"\xdcbungsaufgaben zur Typisierung mittels TypeScript"},c="Aufgaben zu TypeScript",l={},d=[{value:"Aufgabe 1 - Hallo Welt",id:"aufgabe-1---hallo-welt",level:2},{value:"Aufgabe 2 - Interface",id:"aufgabe-2---interface",level:2},{value:"Aufgabe 3 - Union-Type",id:"aufgabe-3---union-type",level:2},{value:"Aufgabe 4 - Arrays",id:"aufgabe-4---arrays",level:2},{value:"Aufgabe 5 - Funktionstypen",id:"aufgabe-5---funktionstypen",level:2},{value:"Aufgabe 6 - Typenparameter",id:"aufgabe-6---typenparameter",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"aufgaben-zu-typescript",children:"Aufgaben zu TypeScript"})}),"\n",(0,t.jsx)(n.p,{children:"Zu TypeScript gibt es hier nur einige wenige einf\xfchrende Aufgaben. Falls Sie\nsich weiter mit TypeScript besch\xe4ftigen wollen: Versuchen Sie, alles JavaScript\nin TypeScript mit Typen-Annotationen zu schreiben!"}),"\n",(0,t.jsxs)(n.p,{children:["Diese \xdcbungsaufgaben k\xf6nnen Sie auch online im ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/play",children:"TypeScript Playground"}),"\nl\xf6sen."]}),"\n",(0,t.jsx)(n.h2,{id:"aufgabe-1---hallo-welt",children:"Aufgabe 1 - Hallo Welt"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Schreiben Sie eine TypeScript-Funktion, die den Namen und das Alter eines\nNutzers als Parameter entgegennimmt und einen String mit dem Inhalt\n",(0,t.jsx)(n.code,{children:"Hallo junger <Name>!"})," (wenn Alter < 50) oder ",(0,t.jsx)(n.code,{children:"Hallo weiser <Name>!"})," (wenn Alter >= 50)\nzur\xfcckgibt!"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"aufgabe-2---interface",children:"Aufgabe 2 - Interface"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Erstellen Sie ein Interface ",(0,t.jsx)(n.code,{children:"User"})," f\xfcr einen Nutzer mit wenigstens Eigenschaften\nf\xfcr ID, Name und Alter! Schreiben Sie eine Funktion, welche ein Array von Nutzern\nentgegennimmt und die Summe der Alter aller Nutzer zur\xfcckgibt!"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"aufgabe-3---union-type",children:"Aufgabe 3 - Union-Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Schreiben Sie eine Funktion ",(0,t.jsx)(n.code,{children:"countName"})," mit 3 Parametern, welche alle entweder vom Typ\n",(0,t.jsx)(n.code,{children:"User"})," sind oder den Wert ",(0,t.jsx)(n.code,{children:"undefined"})," haben. Geben Sie die Gesamtzahl der Zeichen aller\nNamen zur\xfcck! Falls ein Parameter ",(0,t.jsx)(n.code,{children:"undefined"})," ist, soll diese wie ein leerer\nName behandelt werden."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Beispiele zur Verwendung:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'countName({name: "Max"}, {name: "Maria"}, {name: "Joe"})'})," ergibt ",(0,t.jsx)(n.code,{children:"11"}),", da ",(0,t.jsx)(n.code,{children:"Max"})," 3 Zeichen hat, ",(0,t.jsx)(n.code,{children:"Maria"})," 5 und ",(0,t.jsx)(n.code,{children:"Joe"})," 3."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'countName({name: "Max"}, undefined, {name: "Joe"})'})," ergibt ",(0,t.jsx)(n.code,{children:"6"}),", da ",(0,t.jsx)(n.code,{children:"undefined"})," als leerer Name behandelt wird."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"aufgabe-4---arrays",children:"Aufgabe 4 - Arrays"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Schreiben Sie eine Funktion, welche ein Array von Nutzers entgegennimmt\nund ein neues Array zur\xfcckliefert, welches nur die Nutzer enth\xe4lt, die \xe4lter\nals 18 sind."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"aufgabe-5---funktionstypen",children:"Aufgabe 5 - Funktionstypen"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Schreiben Sie eine Funktion ",(0,t.jsx)(n.code,{children:"createGreeter"}),", welche einen Parameter mit dem\nNamen eines Nutzers entgegennimmt. Die Funktion soll eine neue Funktion zur\xfcckliefern,\nwelche das Alter des Nutzers als Parameter entgegennimmt und einen Gru\xdf-Text\nim Format ",(0,t.jsx)(n.code,{children:"Hallo <Name>, du bist <Age> alt!"})," zur\xfcckliefert."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Tip: Lesen Sie hierzu ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#function-type-expressions",children:"Function Type Expressions"})," im TypeScript Handbook."]}),"\n",(0,t.jsx)(n.p,{children:"Beispiel zur Verwendung:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const maxGreeter = createGreeter("Max");\nconst maryGreeter = createGreeter("Mary");\n\nconsole.log(maxGreeter(10)); // Hallo Max, du bist 10!\nconsole.log(maxGreeter(20)); // Hallo Max, du bist 20!\nconsole.log(maryGreeter(10)); // Hallo Mary, du bist 10!\nconsole.log(maryGreeter(20)); // Hallo Mary, du bist 20!\n'})}),"\n",(0,t.jsx)(n.h2,{id:"aufgabe-6---typenparameter",children:"Aufgabe 6 - Typenparameter"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Implementieren Sie selber eine Map-Funktion! D.h., schreiben Sie eine Funktion\n",(0,t.jsx)(n.code,{children:"map"}),", welche 2 Parameter ",(0,t.jsx)(n.code,{children:"items"})," und ",(0,t.jsx)(n.code,{children:"mapper"})," entgegennimmt. ",(0,t.jsx)(n.code,{children:"items"})," ist ein\nArray mit beliebigen Inhalt. ",(0,t.jsx)(n.code,{children:"mapper"})," ist eine Funktion, welche einen Wert\naus ",(0,t.jsx)(n.code,{children:"items"})," entgegennimmt und einen anderen Wert zur\xfcckliefert. Die Funktion\n",(0,t.jsx)(n.code,{children:"map"})," soll nun ein neues Array zur\xfcckliefern mit der gleichen Anzahl von Elementen,\nvon ",(0,t.jsx)(n.code,{children:"items"}),", wobei jedes Element mittels ",(0,t.jsx)(n.code,{children:"mapper"})," in ein neues Element \xfcberf\xfchrt wurde."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Tip: Lesen Sie hierzu ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions",children:"Generic Functions"})," im TypeScript Handbook."]}),"\n",(0,t.jsx)(n.p,{children:"Beispiel zur Verwendung:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const user1 = {age: 10, name: "Max"};\nconst user2 = {age: 20, name: "Mary"};\n\n// [10, 20]\nconst ages: number[] = map([user1, user2], user => user.age);\n\n// ["Max", "Mary"]\nconst names: string[] = map([user1, user2], user => user.name);\n\n// [1, 4, 9]\nconst squares: number[] = map([1, 2, 3], x => x**2);\n'})})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);