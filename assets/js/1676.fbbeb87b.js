"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[1676],{1676:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o='"babel transform-react-jsx";\n\nconst { useEffect, useState } = React;\n\nconst root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(<MyApp />);\n\nfunction MyApp() {\n  return (\n    <>\n      <TodoApp />\n      <PageFooter />\n    </>\n  );\n}\n\nfunction TodoApp() {\n  const [items, setItems] = useState(() => loadTodoItems());\n  const [filter, setFilter] = useState("all");\n\n  useEffect(() => storeTodoItems(items), [items]);\n\n  const addNewTodoItem = (newTodoName) => {\n    const id = crypto.randomUUID();\n    setItems([...items, { id, name: newTodoName, completed: false }]);\n  };\n\n  const changeFilter = (newFilter) => setFilter(newFilter);\n\n  const removeCompleted = () => setItems(items.filter((x) => !x.completed));\n\n  const changeCompletion = (itemId, completed) => {\n    const newItems = spliceItems(items, itemId, (oldItem) => [\n      { ...oldItem, completed },\n    ]);\n    setItems(newItems);\n  };\n  const removeItem = (itemId) => {\n    setItems(spliceItems(items, itemId, () => []));\n  };\n\n  const renameItem = (itemId, name) => {\n    const newItems = spliceItems(items, itemId, (oldItem) => [\n      { ...oldItem, name },\n    ]);\n    setItems(newItems);\n  };\n\n  const toggleAll = (completed) => {\n    setItems(items.map((item) => ({ ...item, completed })));\n  };\n\n  const activeCount = items.filter((item) => !item.completed).length;\n\n  const filterFn = createTodoItemFilter(filter);\n\n  return (\n    <section className="todoapp">\n      <TodoHeader onNewTodo={addNewTodoItem} />\n      <TodoMain\n        items={items}\n        filter={filterFn}\n        onItemCompletionChange={changeCompletion}\n        onItemRename={renameItem}\n        onItemRemove={removeItem}\n        onToggleAll={toggleAll}\n      />\n      <TodoFooter\n        filter={filter}\n        activeCount={activeCount}\n        onFilterChange={changeFilter}\n        onRemoveCompleted={removeCompleted}\n      />\n    </section>\n  );\n}\n\nfunction TodoHeader({ onNewTodo }) {\n  const [name, setName] = useState("");\n\n  const onChange = (e) => setName(e.target.value);\n\n  const onKeyDown = (e) => {\n    if (e.key === "Enter" && name.length > 0) {\n      onNewTodo(name);\n      setName("");\n    }\n  };\n\n  return (\n    <header>\n      <h1>TODOs</h1>\n      <div className="input-container">\n        <input\n          className="new-todo"\n          id="todo-input"\n          type="text"\n          value={name}\n          onKeyDown={onKeyDown}\n          onChange={onChange}\n          autoComplete="off"\n          placeholder="Was muss getan werden?"\n        />\n      </div>\n    </header>\n  );\n}\n\nfunction TodoMain({\n  items,\n  filter,\n  onItemCompletionChange,\n  onItemRename,\n  onItemRemove,\n  onToggleAll,\n}) {\n  const allCompleted = items.every((item) => item.completed);\n  return (\n    <main className="main">\n      <TodoToggleAll allCompleted={allCompleted} onToggleAll={onToggleAll} />\n      <TodoList\n        items={items}\n        filter={filter}\n        onItemCompletionChange={onItemCompletionChange}\n        onItemRename={onItemRename}\n        onItemRemove={onItemRemove}\n      />\n    </main>\n  );\n}\n\nfunction TodoToggleAll({ allCompleted, onToggleAll }) {\n  return (\n    <div className="toggle-all-container">\n      <input\n        className="toggle-all"\n        type="checkbox"\n        id="toggle-all"\n        checked={allCompleted}\n        onChange={(e) => onToggleAll(e.target.checked)}\n      />\n      <label className="toggle-all-label" htmlFor="toggle-all">\n        Alle als erledigt / unerledigt markieren\n      </label>\n    </div>\n  );\n}\n\nfunction TodoList({\n  items,\n  filter,\n  onItemCompletionChange,\n  onItemRename,\n  onItemRemove,\n}) {\n  return (\n    <ul className="todo-list">\n      {items.filter(filter).map((item) => (\n        <TodoItem\n          key={item.id}\n          item={item}\n          onCompletionChange={(completed) =>\n            onItemCompletionChange(item.id, completed)\n          }\n          onRename={(newName) => onItemRename(item.id, newName)}\n          onRemove={() => onItemRemove(item.id)}\n        />\n      ))}\n    </ul>\n  );\n}\n\nfunction TodoItem({ item, onCompletionChange, onRename, onRemove }) {\n  const [newName, setNewName] = useState("");\n  const [editing, setEditing] = useState(false);\n\n  const startEdit = () => {\n    setEditing(true);\n    setNewName(item.name);\n  };\n\n  const onEditKeyDown = (e) => {\n    if (e.key === "Enter") {\n      setEditing(false);\n      setNewName("");\n      onRename(newName);\n    }\n    if (e.key === "Escape") {\n      setEditing(false);\n    }\n  };\n\n  return (\n    <li\n      className={`todo-list-item ${item.completed ? "completed" : ""} ${editing ? "editing" : ""}`}\n    >\n      <div className="view">\n        <input\n          className="toggle"\n          type="checkbox"\n          checked={item.completed}\n          onChange={(e) => onCompletionChange(e.target.checked)}\n        />\n        <label className="todo-list-item-content" onDoubleClick={startEdit}>\n          {item.name}\n        </label>\n        <button\n          className="destroy"\n          type="button"\n          onPointerDown={() => onRemove()}\n        />\n      </div>\n      <input\n        className="edit"\n        id="todo-edit-input"\n        type="text"\n        ref={(input) => input?.focus()}\n        value={newName}\n        onChange={(e) => setNewName(e.target.value)}\n        onKeyDown={onEditKeyDown}\n      />\n    </li>\n  );\n}\n\nfunction TodoFooter({\n  filter,\n  activeCount,\n  onFilterChange,\n  onRemoveCompleted,\n}) {\n  return (\n    <footer className="footer">\n      <span className="todo-count">{`${activeCount} TODO verbleibend!`}</span>\n      <ul className="filters">\n        <li className={`filter-all ${filter === "all" ? "selected" : ""}`}>\n          <a onPointerDown={() => onFilterChange("all")}>Alle</a>\n        </li>\n        <li\n          className={`filter-active ${filter === "active" ? "selected" : ""}`}\n        >\n          <a onPointerDown={() => onFilterChange("active")}>Aktive</a>\n        </li>\n        <li\n          className={`filter-completed ${filter === "completed" ? "selected" : ""}`}\n        >\n          <a onPointerDown={() => onFilterChange("completed")}>Fertige</a>\n        </li>\n      </ul>\n      <button\n        className="clear-completed"\n        type="button"\n        onPointerDown={onRemoveCompleted}\n      >\n        Fertige TODOs l\xf6schen\n      </button>\n    </footer>\n  );\n}\n\nfunction PageFooter() {\n  const mdnStorageLink =\n    "https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API";\n  return (\n    <footer className="info">\n      <p>Doppelklick, um ein TODO zu bearbeiten</p>\n      <p>\n        TODOs werden im <a href={mdnStorageLink}>localStorage</a>gespeichert\n      </p>\n      <p>\n        Basierend auf <a href="http://todomvc.com">TodoMVC</a>\n      </p>\n    </footer>\n  );\n}\n\nfunction createTodoItemFilter(filter) {\n  switch (filter) {\n    case "all":\n      return () => true;\n    case "active":\n      return (item) => !item.completed;\n    case "completed":\n      return (item) => item.completed;\n  }\n}\n\nfunction spliceItems(items, itemId, createNewItems) {\n  const index = items.findIndex((item) => item.id === itemId);\n  if (index >= 0) {\n    return [\n      ...items.slice(0, index),\n      ...createNewItems(items[index]),\n      ...items.slice(index + 1),\n    ];\n  }\n  return items;\n}\n\n// Speichern und Laden im localStorage\nfunction storeTodoItems(todoItems) {\n  localStorage.setItem("todo-app-items-react", JSON.stringify(todoItems));\n}\n\nfunction loadTodoItems() {\n  try {\n    const itemDataString = localStorage.getItem("todo-app-items-react");\n    return itemDataString ? JSON.parse(itemDataString) : [];\n  } catch (e) {\n    console.error(\n      "Could not load items from local storage -- corrupted data?",\n      e,\n    );\n    return [];\n  }\n}'}}]);