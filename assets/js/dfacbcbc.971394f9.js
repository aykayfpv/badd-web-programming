"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[3925],{1184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(4041);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},8835:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"web-programming/http/http-web-socket","title":"Abschnitt 5 - Web Socket","description":"Bidirektionale Kommunikation mittels Web Socket","source":"@site/docs/web-programming/http/web-socket.mdx","sourceDirName":"web-programming/http","slug":"/http/web-socket","permalink":"/badd-web-programming/docs/http/web-socket","draft":false,"unlisted":false,"editUrl":"https://github.com/blutorange/badd-web-programming/tree/main/packages/lecture/docs/web-programming/http/web-socket.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"http-web-socket","slug":"/http/web-socket","sidebar_position":5,"description":"Bidirektionale Kommunikation mittels Web Socket"},"sidebar":"tutorialSidebar","previous":{"title":"Abschnitt 4 - Caching","permalink":"/badd-web-programming/docs/http/caching"},"next":{"title":"Kapitel 5 - Browser-Features und Dev-Tools","permalink":"/badd-web-programming/docs/browser-features"}}');var r=t(1085),s=t(1184);const a={id:"http-web-socket",slug:"/http/web-socket",sidebar_position:5,description:"Bidirektionale Kommunikation mittels Web Socket"},c="Abschnitt 5 - Web Socket",o={},d=[{value:"Problemstellung",id:"problemstellung",level:2},{value:"Bidirektionale Kommunikation",id:"bidirektionale-kommunikation",level:2},{value:"JavaScript-API",id:"javascript-api",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"abschnitt-5---web-socket",children:"Abschnitt 5 - Web Socket"})}),"\n",(0,r.jsx)(n.p,{children:"Zur Motivation starten wir mit der Problemstellung."}),"\n",(0,r.jsx)(n.h2,{id:"problemstellung",children:"Problemstellung"}),"\n",(0,r.jsx)(n.p,{children:"Stellen wir uns vor, wir wollen eine Webapp schreiben f\xfcr ein E-Mail-Inbox.\nIn der Inbox werden alle E-Mails des Nutzers in einer Liste angezeigt. Sobald\neine neue E-Mail eingeht, soll diese in der Liste erscheinen. Wie ist das technisch\nm\xf6glich?"}),"\n",(0,r.jsx)(n.p,{children:"Bisher haben wir nur HTTP-Requests betrachtet, die durch JavaScript im Browser\nausgel\xf6st werden. Damit k\xf6nnen die Daten der neuen E-Mail vom Server abgeholt\nwerden. Doch woher soll der Browser wissen, wann eine E-Mail verf\xfcgbar ist,\num diese abzuholen."}),"\n",(0,r.jsx)(n.p,{children:"Ein \xe4hnliches Problem haben wir, wenn wir das Web-Frontend f\xfcr eine Chat-App\nschreiben wollen. Woher wei\xdf der Browser, wann eine neue Nachricht eingegangen\nist?"}),"\n",(0,r.jsx)(n.p,{children:"Eine M\xf6glichkeit, um das zu l\xf6sen: Wir k\xf6nnten kontinuerlich beim Server anfragen,\nob neue Nachrichten oder E-Mails vorhanden sind. Dabei laufen wir aber in einen\nKonflikt zwischen 2 Faktoren:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Wir m\xfcssen so oft wie m\xf6glich nachfragen, um die Zeit zwischen Eingang\nder E-Mail und Anzeige im Browser zu reduzieren."}),"\n",(0,r.jsx)(n.li,{children:"Wir sollten so wenig wie m\xf6glich anfragen, um die Serverlast gering zu halten."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"W\xe4re es nicht besser, wenn der Server uns direkt in dem Moment, wo eine E-Mail\noder Nachricht eingegangen ist, uns dies mitteilen k\xf6nnte?"}),"\n",(0,r.jsx)(n.h2,{id:"bidirektionale-kommunikation",children:"Bidirektionale Kommunikation"}),"\n",(0,r.jsxs)(n.p,{children:["Das ist , was ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",children:"Web Socket"}),"\nuns erm\xf6glichen."]}),"\n",(0,r.jsx)(n.p,{children:"Mit einem Web Socket ist eine bidirektionale Kommunikation zwischen Server und\nClient m\xf6glich. Das bedeutet, wir k\xf6nnen dem Server Nachrichten senden (wann wir wollen);\nund der Server kann uns Nachrichten senden (wann er will)."}),"\n",(0,r.jsx)(n.p,{children:"Technisch funktionieren Web Socket so, dass der Browser zuerst ein HTTP-Request\nan den Server stellt, mit der Bitte, einen Web Socket zu \xf6ffnen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"GET wss://example.com/chat/channel HTTP/1.1\nconnection: Upgrade\nupgrade: websocket\n"})}),"\n",(0,r.jsx)(n.p,{children:"Falls der Server Web Socket unterst\xfctzt und willens ist, einen Web Socket aufzubauen,\nantwortet der Server mit dem Status-Code 101:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"HTTP/1.1 101 Switching Protocols\nconnection: Upgrade\nupgrade: websocket\n"})}),"\n",(0,r.jsx)(n.p,{children:"Nun ist der Web Socket aufgebaut. Server und Client halten die Verbindung offen,\num sich jederzeit Nachrichten einander senden zu k\xf6nnen."}),"\n",(0,r.jsx)(n.h2,{id:"javascript-api",children:"JavaScript-API"}),"\n",(0,r.jsxs)(n.p,{children:["Um von den M\xf6glichkeiten eines Web Socket Gebrauch zu machen, m\xfcssen wir\n",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",children:"entsprechendes JavaScript"}),"\nschreiben, welches die WebSocket-Verbindung aufbaut und anschlie\xdfend Nachrichten\nsendet und empf\xe4ngt."]}),"\n",(0,r.jsx)(n.p,{children:"Vereinfacht dargestellt ist der grobe Ablauf wie folgt:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// Neune Socket \xf6ffnen\nconst socket = new WebSocket("wss://example.com/chat/channel");\n\n// Auf Nachrichten vom Server reagieren\nsocket.addEventListener("message", event => {\n  // Zugriff auf die Daten, die der Server gesendet hat.\n  console.log(event.data);\n});\n\n// Dr\xfcckt der Nutzer auf den Button zum Senden einer Chat-Nachricht\n// senden wir die Nachricht an den Server.\ndocument.getElementById("submitChatMessage", () => {\n  const chatMessage = document.getElementById("chatMessage");\n  socket.send(chatMessage.value);\n  chatMessage.value = "";\n});\n\n// Socket schlie\xdfen, wenn nicht mehr ben\xf6tigt\ndocument.getElementById("quitChat", () => {\n  socket.close();\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);