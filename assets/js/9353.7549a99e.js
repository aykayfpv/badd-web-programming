"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[9353],{9353:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r='// Dependency injection for service components\nclass ComponentRegistry {\n  static #instance = new ComponentRegistry();\n  #bound;\n  #calculator;\n  #logger;\n\n  get calculator() {\n    return this.#calculator;\n  }\n\n  get logger() {\n    return this.#logger;\n  }\n\n  bind(services) {\n    if (this.#bound) {\n      throw new Error("Illegal attempt to rebind components!");\n    }\n    this.#bound = true;\n    this.#calculator = services.calculator;\n    this.#logger = services.logger;\n  }\n\n  static get instance() {\n    return ComponentRegistry.#instance;\n  }\n}\n\n// Simple logger service that uses the native console mechanism\nclass NativeLoggerService {\n  #name;\n\n  constructor(name) {\n    this.#name = name;\n  }\n\n  get level() {\n    return this.level;\n  }\n\n  info(message) {\n    console.info(this.#name, message);\n  }\n\n  debug(message) {\n    console.debug(this.#name, message);\n  }\n\n  warn(message) {\n    console.warn(this.#name, message);\n  }\n\n  error(message) {\n    console.error(this.#name, message);\n  }\n}\n\n// Simple calculator service that uses builtin functions on 64 bit floats\nclass FloatCalculatorService {\n  factorial(x) {\n    if (Number.isNaN(x)) return x;\n    if (x === 0) return 1;\n    if (x > 170) {\n      ComponentRegistry.instance.logger.debug(`Number exceeds limit for factorial ${x}`);\n      return Number.POSITIVE_INFINITY;\n    }\n    if (x < 0) throw new Error("Cannot compute factorial for negative numbers!");\n    let fac = x;\n    while (--x > 0) {\n      fac *= x;\n    }\n    return fac;\n  }\n\n  square(x) {\n    return x * x;\n  }\n}\n\n// Wire up our application with the services of our choice\nComponentRegistry.instance.bind({\n  calculator: new FloatCalculatorService(),\n  logger: new NativeLoggerService("[factorial-object.js]"),\n});\n\n// Should log a debug message\nComponentRegistry.instance.calculator.factorial(300);\n\n// Should print 5! * 5! = 14400\nComponentRegistry.instance.calculator.square(\n  ComponentRegistry.instance.calculator.factorial(5)\n)'}}]);