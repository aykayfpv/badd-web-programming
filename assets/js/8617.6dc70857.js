"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[8617],{98617:(n,e,t)=>{t.r(e),t.d(e,{default:()=>c});const c='const countSelect = document.getElementById("count");\nconst childContainer = document.getElementById("child-container");\nconst template = document.getElementById("child-template");\n\ntemplate.remove();\n\n// Wenn eine andere Kinderzahl selektiert wurde...\ncountSelect.addEventListener("change", () => {\n  // Lese die aktuelle und die gew\xfcnschte Anzahl aus\n  const targetCount = Number.parseInt(countSelect.value);\n  const currentCount = childContainer.childElementCount;\n  if (targetCount > currentCount) {\n    // Neue Fieldsets hinzuf\xfcgen\n    for (let i = currentCount; i < targetCount; i++) {\n      const copy = createChildDetailsCopy(i);\n      childContainer.append(copy);\n    }\n  } else if (targetCount < currentCount) {\n    // Bestehende Fieldsets entfernen\n    for (let i = currentCount; i > targetCount; i--) {\n      childContainer.removeChild(childContainer.lastChild);\n    }\n  }\n});\n\nfunction createChildDetailsCopy(index) {\n  const copy = template.cloneNode(true);\n\n  // Ensure unique IDs\n  const newIdByOldId = new Map();\n  for (const child of eachElementDfs(copy)) {\n    if (child.id) {\n      const newId = `${child.id}_${index}`;\n      newIdByOldId.set(child.id, newId);\n      child.id = newId;\n    }\n  }\n\n  // Update for attribute of <label>\n  for (const label of copy.querySelectorAll("label")) {\n    const newId = newIdByOldId.get(label.htmlFor);\n    if (newId) {\n      label.htmlFor = newId;\n    }\n  }\n\n  return copy;\n}\n\n// Depth-first traversal over each element\nfunction* eachElementDfs(root) {\n  const stack = [root];\n  while (stack.length > 0) {\n    const current = stack.pop();\n    yield current;\n    for (let i = current.children.length - 1; i >= 0; i--) {\n      stack.push(current.children[i]);\n    }\n  }\n}\n'}}]);