"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[2630],{32630:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r='// Script, was im Worker ausgef\xfchrt wird\nfunction workerScript() {\n  globalThis.addEventListener("message", (event) => {\n    const data = event.data;\n    switch (data.type) {\n      case "ping":\n        globalThis.postMessage({ type: "pong", message: data.message });\n        break;\n      case "findPrimes": {\n        const primes = findPrimes(data.limit);\n        primes.splice(50, primes.length - 100, "...");\n        globalThis.postMessage({ type: "foundPrimes", primes });\n        break;\n      }\n      default:\n        console.warn(`Unknown message type from main thread: ${data.type}`);\n        break;\n    }\n  });\n\n  // Rechenintensive Operation\n  function isPrime(n) {\n    if (n < 2) return false;\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n\n  function findPrimes(limit) {\n    const primes = [];\n    let progress = 0;\n    for (let i = 2; i <= limit; i++) {\n      const newProgress = Math.floor(100 * i / limit);\n      if (newProgress !== progress) {\n        progress = newProgress;\n        globalThis.postMessage({\n          type: "progress",\n          operation: "findPrimes",\n          progress,\n        });\n      }\n      if (isPrime(i)) primes.push(i);\n    }\n    return primes;\n  }\n}\n\n// Neuen Worker erstellen\nconst workerBlob = new Blob([`(${workerScript.toString()})()`], {\n  type: "text/javascript",\n});\nconst url = URL.createObjectURL(workerBlob);\nconst worker = new Worker(url, { name: "Demo Worker" });\n\n// Auf Messages vom Worker reagieren\nworker.addEventListener("message", (event) => {\n  const data = event.data;\n  switch (data.type) {\n    case "pong":\n      console.log(`Received pong from worker: ${data.message}`);\n      document.getElementById("ping-output").value = data.message;\n      document.getElementById("ping").disabled = false;\n      break;\n    case "foundPrimes": {\n      document.getElementById("prime-output").value = data.primes.join(", ");\n      document.getElementById("prime").disabled = false;\n      break;\n    }\n    case "progress": {\n      if (data.progress % 10 === 0) {\n        console.log(`Progress on ${data.operation}: ${data.progress}%`);\n      }\n      break;\n    }\n    default:\n      console.warn(`Unknown message type from worker: ${data.type}`);\n      break;\n  }\n});\n\n// Bei Knopfdruck Message an Worker senden\ndocument.getElementById("ping").addEventListener("click", () => {\n  const message = document.getElementById("ping-message").value;\n  document.getElementById("ping").disabled = true;\n  worker.postMessage({ type: "ping", message });\n});\n\ndocument.getElementById("prime").addEventListener("click", () => {\n  const limit = Number.parseInt(document.getElementById("prime-count").value);\n  document.getElementById("prime").disabled = true;\n  worker.postMessage({ type: "findPrimes", limit });\n});\n\n// Worker beenden, wenn die Seite beendet ist\nwindow.onbeforeunload = () => {\n  worker.terminate();\n  URL.revokeObjectURL(url);\n};\n'}}]);