"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[7503],{27503:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});const i='// Failure monad for handling operations that can fail\nconst liftValue = (value) => ({ success: true, value });\nconst liftError = (error) => ({ success: false, error });\nconst bind = (a, f) => (a.success ? f(a.value) : a);\n\n// Matches a number dependent on its properties\nfunction matchNumber(x, cases) {\n  if (Number.isNaN(x)) return cases.NaN(x);\n  if (x === Number.NEGATIVE_INFINITY) return cases.negativeInfinity(x);\n  if (x < 0) return cases.negative(x);\n  if (x === 0) return cases.zero(x);\n  if (x > 0) return cases.positive(x);\n  if (Number.POSITIVE_INFINITY) return cases.positiveInfinity(x);\n}\n\n// Composes two functions f and g\nconst compose = (f, g) => (x) => g(f(x));\n\n// Computes the factorial of a number\nconst factorial = (x) =>\n  matchNumber(x, {\n    NaN: y => liftValue(Number.NaN),\n    negativeInfinity: y =>\n      liftError("Cannot compute factorial for negative numbers!"),\n    negative: y =>\n      liftError("Cannot compute factorial for negative numbers!"),\n    zero: y => liftValue(1),\n    positive: y =>\n      liftValue(\n        y > 170\n          ? Number.POSITIVE_INFINITY\n          : bind(factorial(y - 1), (z) => z * y),\n      ),\n    positiveInfinity: y => liftValue(Number.POSITIVE_INFINITY),\n  });\n\n// Squares a number\nconst square = (x) => x * x;\n\n// Chains multiple IO actions into one\nconst sequence = (ioActions) => (io) => ioActions.reduce((x, f) => f(io, x), undefined);\n\n// Main program that reads a number, computes the square of its factorial\n// and then prints it\nconst main = sequence([\n  (io, _) => io.readInt(),\n  (io, x) => factorial(x),\n  (io, y) => bind(y, compose(square, liftValue)),\n  (io, z) => io.putValue(z.success ? z.value : z.error),\n]);\n\n// Simulates the runtime that execute the IO actions\nfunction runtime(io) {\n  const impl = {\n    readInt: () => 5,\n    putValue: (v) => console.log(v),\n  };\n  io(impl);\n}\n\n// Should print 5! * 5! = 14400\nruntime(main);\n'}}]);