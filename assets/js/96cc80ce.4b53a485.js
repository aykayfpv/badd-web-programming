"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[8312],{2916:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/medias/screenshot-downloader-e05aa8b96452dd1f443a52142cd083a7.webm"},53074:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"exam/basic/exam-basic-screenshot-downloader","title":"Screenshot-Downloader","description":"Screenshot-Downloader","source":"@site/docs/exam/basic/screenshot-downloader.mdx","sourceDirName":"exam/basic","slug":"/exam/basic/screenshot-downloader","permalink":"/badd-web-programming/docs/exam/basic/screenshot-downloader","draft":false,"unlisted":false,"editUrl":"https://github.com/blutorange/badd-web-programming/tree/main/packages/lecture/docs/exam/basic/screenshot-downloader.mdx","tags":[],"version":"current","frontMatter":{"id":"exam-basic-screenshot-downloader","slug":"/exam/basic/screenshot-downloader","description":"Screenshot-Downloader"},"sidebar":"tutorialSidebar","previous":{"title":"Reverse Geosearch","permalink":"/badd-web-programming/docs/exam/basic/reverse-geosearch"},"next":{"title":"Gro\xdfe Aufgaben","permalink":"/badd-web-programming/docs/exam-advanced"}}');var i=r(31085),a=r(71184);const s={id:"exam-basic-screenshot-downloader",slug:"/exam/basic/screenshot-downloader",description:"Screenshot-Downloader"},d="Screenshot-Downloader",o={},c=[{value:"Beschreibung",id:"beschreibung",level:2},{value:"Mindestanforderungen",id:"mindestanforderungen",level:2},{value:"Hinweise",id:"hinweise",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"screenshot-downloader",children:"Screenshot-Downloader"})}),"\n",(0,i.jsx)(n.p,{children:"\xdcber einen Button soll ein Screenshot vom Bildschirm erstellt werden, der\neinsehbar ist und heruntergeladen werden kann."}),"\n",(0,i.jsx)(n.h2,{id:"beschreibung",children:"Beschreibung"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 Button zum Aufnehmen eines Screenshots"}),"\n",(0,i.jsx)(n.li,{children:"1 Eingabefeld f\xfcr den Dateinamen beim Herunterladen"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"mindestanforderungen",children:"Mindestanforderungen"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Bei Klick auf den Button wird ein Screenshot gemacht und als Bild\nangezeigt."}),"\n",(0,i.jsx)(n.li,{children:"Bei Klick auf das Bild wird ein Download mit dem Bild gestartet."}),"\n",(0,i.jsxs)(n.li,{children:["F\xfcr den Dateinamen beim Herunterladen wird der Wert im Textfeld genommen.\nIst kein Wert eingetragen, wird der Default-Dateiname ",(0,i.jsx)(n.code,{children:"screen.png"})," genommen.\nHat der eingegebene Dateiname keine Dateiendung, soll die Dateiendung angef\xfcgt\nwerden."]}),"\n",(0,i.jsx)(n.li,{children:"Das zu nutzende Bildformat ist undefiniert (d.h. keine Einschr\xe4nkung)."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"hinweise",children:"Hinweise"}),"\n",(0,i.jsxs)(n.p,{children:["Auf das Media-Device zur Aufnahme des Bildschirminhalts kann mittels\n",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia",children:"navigator.mediaDevices.getDisplayMedia"}),"\nzugegriffen werden."]}),"\n",(0,i.jsx)(n.p,{children:"Zum Aufnehmen eines Screenshots eines MediaStream mit Video-Track kann folgende\nFunktion benutzt werden:"}),"\n",(0,i.jsx)(t,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'/**\n * Takes a snapshot from the given media stream, which must have a video track.\n * @param {MediaStream} stream A video media stream from which to capture a screenshot.\n * @returns {Promise<Blob>} A blob with the image data.\n */\nfunction takeSnapshotFromMediaStream(stream) {\n    return new Promise((resolve, reject) => {\n        const video = document.createElement("video");\n        const canvas = document.createElement("canvas");\n        const context = canvas.getContext("2d");\n        video.addEventListener("loadeddata", async () => {\n            const { videoWidth, videoHeight } = video;\n            canvas.width = videoWidth;\n            canvas.height = videoHeight;\n            try {\n                await video.play();\n                context.drawImage(video, 0, 0, videoWidth, videoHeight);\n                canvas.toBlob(resolve, \'image/png\');\n            } catch (error) {\n                reject(error);\n            }\n        });\n        video.srcObject = stream;\n    });\n}\n'})})}),"\n",(0,i.jsx)("video",{controls:!0,src:r(2916).A})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},71184:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var t=r(14041);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);